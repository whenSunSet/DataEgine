package com.example.administrator.policemap.dataEngin.localDataService.database.greenDaoDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.policemap.dataEngin.localDataService.database.greenDaoDataBase.entity.UnitBase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNIT_BASE".
*/
public class UnitBaseDao extends AbstractDao<UnitBase, Long> {

    public static final String TABLENAME = "UNIT_BASE";

    /**
     * Properties of entity UnitBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UnitId = new Property(0, long.class, "unitId", true, "unit_id");
        public final static Property UnitName = new Property(1, String.class, "unitName", false, "unit_name");
        public final static Property TopNo = new Property(2, int.class, "topNo", false, "top_no");
        public final static Property OtherTopNo = new Property(3, int.class, "otherTopNo", false, "other_top_no");
        public final static Property LocLng = new Property(4, double.class, "locLng", false, "loc_lng");
        public final static Property LocLat = new Property(5, double.class, "locLat", false, "loc_lat");
        public final static Property WifiId = new Property(6, String.class, "wifiId", false, "wifi_id");
        public final static Property UnitType = new Property(7, byte.class, "unitType", false, "unit_type");
        public final static Property DefaultMission = new Property(8, int.class, "defaultMission", false, "default_mission");
        public final static Property CreateTime = new Property(9, java.util.Date.class, "createTime", false, "create_time");
    };


    public UnitBaseDao(DaoConfig config) {
        super(config);
    }
    
    public UnitBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIT_BASE\" (" + //
                "\"unit_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: unitId
                "\"unit_name\" TEXT NOT NULL ," + // 1: unitName
                "\"top_no\" INTEGER NOT NULL ," + // 2: topNo
                "\"other_top_no\" INTEGER NOT NULL ," + // 3: otherTopNo
                "\"loc_lng\" REAL NOT NULL ," + // 4: locLng
                "\"loc_lat\" REAL NOT NULL ," + // 5: locLat
                "\"wifi_id\" TEXT NOT NULL ," + // 6: wifiId
                "\"unit_type\" INTEGER NOT NULL ," + // 7: unitType
                "\"default_mission\" INTEGER NOT NULL ," + // 8: defaultMission
                "\"create_time\" INTEGER NOT NULL );"); // 9: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIT_BASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UnitBase entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUnitId());
        stmt.bindString(2, entity.getUnitName());
        stmt.bindLong(3, entity.getTopNo());
        stmt.bindLong(4, entity.getOtherTopNo());
        stmt.bindDouble(5, entity.getLocLng());
        stmt.bindDouble(6, entity.getLocLat());
        stmt.bindString(7, entity.getWifiId());
        stmt.bindLong(8, entity.getUnitType());
        stmt.bindLong(9, entity.getDefaultMission());
        stmt.bindLong(10, entity.getCreateTime().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UnitBase entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUnitId());
        stmt.bindString(2, entity.getUnitName());
        stmt.bindLong(3, entity.getTopNo());
        stmt.bindLong(4, entity.getOtherTopNo());
        stmt.bindDouble(5, entity.getLocLng());
        stmt.bindDouble(6, entity.getLocLat());
        stmt.bindString(7, entity.getWifiId());
        stmt.bindLong(8, entity.getUnitType());
        stmt.bindLong(9, entity.getDefaultMission());
        stmt.bindLong(10, entity.getCreateTime().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UnitBase readEntity(Cursor cursor, int offset) {
        UnitBase entity = new UnitBase( //
            cursor.getLong(offset + 0), // unitId
            cursor.getString(offset + 1), // unitName
            cursor.getInt(offset + 2), // topNo
            cursor.getInt(offset + 3), // otherTopNo
            cursor.getDouble(offset + 4), // locLng
            cursor.getDouble(offset + 5), // locLat
            cursor.getString(offset + 6), // wifiId
            (byte) cursor.getShort(offset + 7), // unitType
            cursor.getInt(offset + 8), // defaultMission
            new java.util.Date(cursor.getLong(offset + 9)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UnitBase entity, int offset) {
        entity.setUnitId(cursor.getLong(offset + 0));
        entity.setUnitName(cursor.getString(offset + 1));
        entity.setTopNo(cursor.getInt(offset + 2));
        entity.setOtherTopNo(cursor.getInt(offset + 3));
        entity.setLocLng(cursor.getDouble(offset + 4));
        entity.setLocLat(cursor.getDouble(offset + 5));
        entity.setWifiId(cursor.getString(offset + 6));
        entity.setUnitType((byte) cursor.getShort(offset + 7));
        entity.setDefaultMission(cursor.getInt(offset + 8));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UnitBase entity, long rowId) {
        entity.setUnitId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UnitBase entity) {
        if(entity != null) {
            return entity.getUnitId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
