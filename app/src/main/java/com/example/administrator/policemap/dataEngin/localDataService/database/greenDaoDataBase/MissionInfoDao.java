package com.example.administrator.policemap.dataEngin.localDataService.database.greenDaoDataBase;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.policemap.dataEngin.localDataService.database.greenDaoDataBase.entity.MissionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MISSION_INFO".
*/
public class MissionInfoDao extends AbstractDao<MissionInfo, Long> {

    public static final String TABLENAME = "MISSION_INFO";

    /**
     * Properties of entity MissionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MissionId = new Property(0, long.class, "missionId", true, "mission_id");
        public final static Property PostUnitId = new Property(1, int.class, "postUnitId", false, "post_unit_id");
        public final static Property CheckPoint = new Property(2, int.class, "checkPoint", false, "check_point");
        public final static Property CheckIn = new Property(3, java.util.Date.class, "checkIn", false, "check_in");
        public final static Property CheckOut = new Property(4, java.util.Date.class, "checkOut", false, "check_out");
        public final static Property MissionDes = new Property(5, String.class, "missionDes", false, "mission_des");
        public final static Property Duration = new Property(6, int.class, "duration", false, "duration");
        public final static Property GainScore = new Property(7, byte.class, "gainScore", false, "gain_score");
        public final static Property PCount = new Property(8, int.class, "pCount", false, "p_count");
        public final static Property Notes = new Property(9, String.class, "notes", false, "notes");
        public final static Property NowPCount = new Property(10, int.class, "nowPCount", false, "now_p_count");
        public final static Property CreateTime = new Property(11, java.util.Date.class, "createTime", false, "create_time");
    };


    public MissionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MissionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MISSION_INFO\" (" + //
                "\"mission_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: missionId
                "\"post_unit_id\" INTEGER NOT NULL ," + // 1: postUnitId
                "\"check_point\" INTEGER NOT NULL ," + // 2: checkPoint
                "\"check_in\" INTEGER," + // 3: checkIn
                "\"check_out\" INTEGER," + // 4: checkOut
                "\"mission_des\" TEXT NOT NULL ," + // 5: missionDes
                "\"duration\" INTEGER NOT NULL ," + // 6: duration
                "\"gain_score\" INTEGER NOT NULL ," + // 7: gainScore
                "\"p_count\" INTEGER NOT NULL ," + // 8: pCount
                "\"notes\" TEXT NOT NULL ," + // 9: notes
                "\"now_p_count\" INTEGER NOT NULL ," + // 10: nowPCount
                "\"create_time\" INTEGER NOT NULL );"); // 11: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MISSION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMissionId());
        stmt.bindLong(2, entity.getPostUnitId());
        stmt.bindLong(3, entity.getCheckPoint());
 
        java.util.Date checkIn = entity.getCheckIn();
        if (checkIn != null) {
            stmt.bindLong(4, checkIn.getTime());
        }
 
        java.util.Date checkOut = entity.getCheckOut();
        if (checkOut != null) {
            stmt.bindLong(5, checkOut.getTime());
        }
        stmt.bindString(6, entity.getMissionDes());
        stmt.bindLong(7, entity.getDuration());
        stmt.bindLong(8, entity.getGainScore());
        stmt.bindLong(9, entity.getPCount());
        stmt.bindString(10, entity.getNotes());
        stmt.bindLong(11, entity.getNowPCount());
        stmt.bindLong(12, entity.getCreateTime().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissionInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMissionId());
        stmt.bindLong(2, entity.getPostUnitId());
        stmt.bindLong(3, entity.getCheckPoint());
 
        java.util.Date checkIn = entity.getCheckIn();
        if (checkIn != null) {
            stmt.bindLong(4, checkIn.getTime());
        }
 
        java.util.Date checkOut = entity.getCheckOut();
        if (checkOut != null) {
            stmt.bindLong(5, checkOut.getTime());
        }
        stmt.bindString(6, entity.getMissionDes());
        stmt.bindLong(7, entity.getDuration());
        stmt.bindLong(8, entity.getGainScore());
        stmt.bindLong(9, entity.getPCount());
        stmt.bindString(10, entity.getNotes());
        stmt.bindLong(11, entity.getNowPCount());
        stmt.bindLong(12, entity.getCreateTime().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MissionInfo readEntity(Cursor cursor, int offset) {
        MissionInfo entity = new MissionInfo( //
            cursor.getLong(offset + 0), // missionId
            cursor.getInt(offset + 1), // postUnitId
            cursor.getInt(offset + 2), // checkPoint
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // checkIn
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // checkOut
            cursor.getString(offset + 5), // missionDes
            cursor.getInt(offset + 6), // duration
            (byte) cursor.getShort(offset + 7), // gainScore
            cursor.getInt(offset + 8), // pCount
            cursor.getString(offset + 9), // notes
            cursor.getInt(offset + 10), // nowPCount
            new java.util.Date(cursor.getLong(offset + 11)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissionInfo entity, int offset) {
        entity.setMissionId(cursor.getLong(offset + 0));
        entity.setPostUnitId(cursor.getInt(offset + 1));
        entity.setCheckPoint(cursor.getInt(offset + 2));
        entity.setCheckIn(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setCheckOut(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setMissionDes(cursor.getString(offset + 5));
        entity.setDuration(cursor.getInt(offset + 6));
        entity.setGainScore((byte) cursor.getShort(offset + 7));
        entity.setPCount(cursor.getInt(offset + 8));
        entity.setNotes(cursor.getString(offset + 9));
        entity.setNowPCount(cursor.getInt(offset + 10));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MissionInfo entity, long rowId) {
        entity.setMissionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MissionInfo entity) {
        if(entity != null) {
            return entity.getMissionId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
